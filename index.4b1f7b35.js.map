{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/grid.js","src/scripts/cell.js","src/scripts/tile.js"],"sourcesContent":["class $e3f2d471551ea10d$export$f6f0c3fe4ec306ea {\n    constructor(gridElement, x, y){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"cell\");\n        gridElement.append(cell);\n        this.x = x;\n        this.y = y;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    unlinkTile() {\n        this.linkedTile = null;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    hasTileForMerge() {\n        return !!this.linkedTileForMerge;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        if (this.linkedTile.value === 2048) {\n            const winMessage = document.querySelector(\".message_win\");\n            winMessage.classList.remove(\"hidden\");\n            winMessage.style.color = \"#00ff00\";\n        } else {\n            const mergeValue = this.linkedTile.value + this.linkedTileForMerge.value;\n            this.linkedTile.setValue(mergeValue);\n            this.linkedTileForMerge.removeFromDOM();\n            this.unlinkTileForMerge();\n        }\n    }\n}\n\n\nconst $d127f00a76274e78$var$GRID_SIZE = 4;\nconst $d127f00a76274e78$var$CELLS_COUNT = $d127f00a76274e78$var$GRID_SIZE * $d127f00a76274e78$var$GRID_SIZE;\nclass $d127f00a76274e78$export$ef2184bd89960b14 {\n    constructor(gridElement){\n        this.cells = [];\n        for(let i = 0; i < $d127f00a76274e78$var$CELLS_COUNT; i++)this.cells.push(new (0, $e3f2d471551ea10d$export$f6f0c3fe4ec306ea)(gridElement, i % $d127f00a76274e78$var$GRID_SIZE, Math.floor(i / $d127f00a76274e78$var$GRID_SIZE)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReservedColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReservedRow = this.cellsGroupedByRow.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    getRandomEmptyCell() {\n        const emptyCell = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCell.length);\n        return emptyCell[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n}\n\n\nclass $8d16fdf861134c32$export$235cb65c20ad2b7 {\n    constructor(gridElement){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"tile\");\n        this.setValue(Math.random() > 0.1 ? 2 : 4);\n        gridElement.append(this.tileElement);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        const bgLightness = 100 - Math.log2(value) * 9;\n        this.value = value;\n        this.tileElement.textContent = value;\n        this.tileElement.style.setProperty(\"--bg-lightness\", `${bgLightness}%`);\n        this.tileElement.style.setProperty(\"--text-lightness\", `${bgLightness < 50 ? 90 : 10}%`);\n    }\n    removeFromDOM() {\n        this.tileElement.remove();\n    }\n    waitForTransitionEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n    waitForAnimationEnd() {\n        return new Promise((resolve)=>{\n            this.tileElement.addEventListener(\"animationend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\nconst $09e991522ca7e64e$var$gameBoard = document.querySelector(\".board\");\nconst $09e991522ca7e64e$var$grid = new (0, $d127f00a76274e78$export$ef2184bd89960b14)($09e991522ca7e64e$var$gameBoard);\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game_score\");\nconst $09e991522ca7e64e$var$touchArea = document.querySelector(\".body2048\");\nlet $09e991522ca7e64e$var$restart = false;\nlet $09e991522ca7e64e$var$gameScore = 0;\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $8d16fdf861134c32$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    const hiddenMessage = document.querySelector(\".message_start\");\n    hiddenMessage.classList.add(\"hidden\");\n    if ($09e991522ca7e64e$var$restart) window.location.reload();\n    $09e991522ca7e64e$var$restart = true;\n});\n$09e991522ca7e64e$var$setupInputOnce();\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\ndocument.addEventListener(\"keydown\", (keypress)=>{\n    const keysToCancel = [\n        \"ArrowUp\",\n        \"ArrowDown\",\n        \"ArrowLeft\",\n        \"ArrowRight\"\n    ];\n    if (keysToCancel.includes(keypress.key)) keypress.preventDefault();\n});\nasync function $09e991522ca7e64e$var$handleInput(keypress) {\n    switch(keypress.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRigth()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    const newTile = new (0, $8d16fdf861134c32$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRigth()) {\n        await newTile.waitForAnimationEnd();\n        const gameResultElement = document.querySelector(\".message_lose\");\n        gameResultElement.classList.remove(\"hidden\");\n        gameResultElement.style.color = \"#ff0000\";\n        $09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n            window.location.reload();\n        });\n        return;\n    }\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nasync function $09e991522ca7e64e$var$moveUp() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByColumn);\n}\nasync function $09e991522ca7e64e$var$moveDown() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByReservedColumn);\n}\nasync function $09e991522ca7e64e$var$moveLeft() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByRow);\n}\nasync function $09e991522ca7e64e$var$moveRight() {\n    await $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByReservedRow);\n}\nasync function $09e991522ca7e64e$var$slideTiles(groupedCells) {\n    const promises = [];\n    groupedCells.forEach((group)=>$09e991522ca7e64e$var$slideTilesInGroup(group, promises));\n    await Promise.all(promises);\n    $09e991522ca7e64e$var$grid.cells.forEach((cell)=>{\n        cell.hasTileForMerge() && cell.mergeTiles();\n    });\n}\nfunction $09e991522ca7e64e$var$slideTilesInGroup(group, promises) {\n    for(let i = 1; i < group.length; i++){\n        if (group[i].isEmpty()) continue;\n        const cellWithTile = group[i];\n        let targetCell;\n        let j = i - 1;\n        while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n            targetCell = group[j];\n            j--;\n        }\n        if (!targetCell) continue;\n        promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n        if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n        else {\n            targetCell.linkTileForMerge(cellWithTile.linkedTile);\n            $09e991522ca7e64e$var$gameScore += cellWithTile.linkedTile.value;\n        }\n        cellWithTile.unlinkTile();\n        $09e991522ca7e64e$var$updateScore();\n    }\n}\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByReservedColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRigth() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByReservedRow);\n}\nfunction $09e991522ca7e64e$var$canMove(groupedCells) {\n    return groupedCells.some((group)=>$09e991522ca7e64e$var$canMoveInGroup(group));\n}\nfunction $09e991522ca7e64e$var$canMoveInGroup(group) {\n    return group.some((cell, index)=>{\n        if (index === 0) return false;\n        if (cell.isEmpty()) return false;\n        const targetCell = group[index - 1];\n        return targetCell.canAccept(cell.linkedTile);\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$scoreElement.textContent = `${$09e991522ca7e64e$var$gameScore}`;\n}\nlet $09e991522ca7e64e$var$startX, $09e991522ca7e64e$var$startY;\n$09e991522ca7e64e$var$touchArea.addEventListener(\"touchstart\", (movement)=>{\n    $09e991522ca7e64e$var$startX = movement.touches[0].clientX;\n    $09e991522ca7e64e$var$startY = movement.touches[0].clientY;\n}, {\n    passive: true\n});\n$09e991522ca7e64e$var$touchArea.addEventListener(\"touchend\", (movement)=>{\n    const endX = movement.changedTouches[0].clientX;\n    const endY = movement.changedTouches[0].clientY;\n    const deltaX = endX - $09e991522ca7e64e$var$startX;\n    const deltaY = endY - $09e991522ca7e64e$var$startY;\n    $09e991522ca7e64e$var$swipe(deltaX, deltaY);\n}, {\n    passive: true\n});\nasync function $09e991522ca7e64e$var$swipe(deltaX, deltaY) {\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (deltaX > 0) {\n            if (!$09e991522ca7e64e$var$canMoveRigth()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveRight();\n        } else {\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            await $09e991522ca7e64e$var$moveLeft();\n        }\n    } else if (deltaY > 0) {\n        if (!$09e991522ca7e64e$var$canMoveDown()) {\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n        }\n        await $09e991522ca7e64e$var$moveDown();\n    } else {\n        if (!$09e991522ca7e64e$var$canMoveUp()) {\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n        }\n        await $09e991522ca7e64e$var$moveUp();\n    }\n    const newTile = new (0, $8d16fdf861134c32$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRigth()) {\n        await newTile.waitForAnimationEnd();\n        const gameResultElement = document.querySelector(\".message_lose\");\n        gameResultElement.classList.remove(\"hidden\");\n        gameResultElement.style.color = \"#ff0000\";\n        $09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n            window.location.reload();\n        });\n        return;\n    }\n    $09e991522ca7e64e$var$setupInputOnce();\n}\n\n\n//# sourceMappingURL=index.4b1f7b35.js.map\n","import { Grid } from './grid.js';\nimport { Tile } from './tile.js';\n\nconst gameBoard = document.querySelector('.board');\nconst grid = new Grid(gameBoard);\nconst startButton = document.querySelector('.start');\nconst scoreElement = document.querySelector('.game_score');\nconst touchArea = document.querySelector('.body2048');\nlet restart = false;\nlet gameScore = 0;\n\nstartButton.addEventListener('click', () => {\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.textContent = 'Restart';\n\n  const hiddenMessage = document.querySelector('.message_start');\n\n  hiddenMessage.classList.add('hidden');\n\n  if (restart) {\n    window.location.reload();\n  }\n\n  restart = true;\n});\n\nsetupInputOnce();\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\ndocument.addEventListener('keydown', (keypress) => {\n  const keysToCancel = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n  if (keysToCancel.includes(keypress.key)) {\n    keypress.preventDefault();\n  }\n});\n\nasync function handleInput(keypress) {\n  switch (keypress.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRigth()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRigth()) {\n    await newTile.waitForAnimationEnd();\n\n    const gameResultElement = document.querySelector('.message_lose');\n\n    gameResultElement.classList.remove('hidden');\n    gameResultElement.style.color = '#ff0000';\n\n    startButton.addEventListener('click', () => {\n      window.location.reload();\n    });\n\n    return;\n  }\n\n  setupInputOnce();\n}\n\nasync function moveUp() {\n  await slideTiles(grid.cellsGroupedByColumn);\n}\n\nasync function moveDown() {\n  await slideTiles(grid.cellsGroupedByReservedColumn);\n}\n\nasync function moveLeft() {\n  await slideTiles(grid.cellsGroupedByRow);\n}\n\nasync function moveRight() {\n  await slideTiles(grid.cellsGroupedByReservedRow);\n}\n\nasync function slideTiles(groupedCells) {\n  const promises = [];\n\n  groupedCells.forEach(group => slideTilesInGroup(group, promises));\n\n  await Promise.all(promises);\n\n  grid.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n}\n\nfunction slideTilesInGroup(group, promises) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n\n      gameScore += cellWithTile.linkedTile.value;\n    }\n\n    cellWithTile.unlinkTile();\n    updateScore();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReservedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRigth() {\n  return canMove(grid.cellsGroupedByReservedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    return targetCell.canAccept(cell.linkedTile);\n  });\n}\n\nfunction updateScore() {\n  scoreElement.textContent = `${gameScore}`;\n}\n\nlet startX, startY;\n\ntouchArea.addEventListener('touchstart', (movement) => {\n  startX = movement.touches[0].clientX;\n  startY = movement.touches[0].clientY;\n}, { passive: true });\n\ntouchArea.addEventListener('touchend', (movement) => {\n  const endX = movement.changedTouches[0].clientX;\n  const endY = movement.changedTouches[0].clientY;\n\n  const deltaX = endX - startX;\n  const deltaY = endY - startY;\n\n  swipe(deltaX, deltaY);\n}, { passive: true });\n\nasync function swipe(deltaX, deltaY) {\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX > 0) {\n      if (!canMoveRigth()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveRight();\n    } else {\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveLeft();\n    }\n  } else {\n    if (deltaY > 0) {\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveDown();\n    } else {\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveUp();\n    }\n  }\n\n  const newTile = new Tile(gameBoard);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRigth()) {\n    await newTile.waitForAnimationEnd();\n\n    const gameResultElement = document.querySelector('.message_lose');\n\n    gameResultElement.classList.remove('hidden');\n    gameResultElement.style.color = '#ff0000';\n\n    startButton.addEventListener('click', () => {\n      window.location.reload();\n    });\n\n    return;\n  }\n\n  setupInputOnce();\n}\n","import { Cell } from './cell.js';\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport class Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE)),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReservedColumn = this.cellsGroupedByColumn\n      .map((column) => [...column].reverse());\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReservedRow = this.cellsGroupedByRow\n      .map((row) => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCell = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCell.length);\n\n    return emptyCell[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n\n      return groupedCells;\n    }, []);\n  }\n}\n","export class Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty()\n      || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value);\n  }\n\n  mergeTiles() {\n    if (this.linkedTile.value === 2048) {\n      const winMessage = document.querySelector('.message_win');\n\n      winMessage.classList.remove('hidden');\n      winMessage.style.color = '#00ff00';\n    } else {\n      const mergeValue = this.linkedTile.value + this.linkedTileForMerge.value;\n\n      this.linkedTile.setValue(mergeValue);\n      this.linkedTileForMerge.removeFromDOM();\n      this.unlinkTileForMerge();\n    }\n  }\n}\n","export class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    const bgLightness = 100 - Math.log2(value) * 9;\n\n    this.value = value;\n    this.tileElement.textContent = value;\n    this.tileElement.style.setProperty('--bg-lightness', `${bgLightness}%`);\n\n    this.tileElement.style.setProperty(\n      '--text-lightness', `${bgLightness < 50 ? 90 : 10}%`,\n    );\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd() {\n    return new Promise(resolve => {\n      this.tileElement\n        .addEventListener('transitionend', resolve, { once: true });\n    });\n  }\n\n  waitForAnimationEnd() {\n    return new Promise(resolve => {\n      this.tileElement\n        .addEventListener('animationend', resolve, { once: true });\n    });\n  }\n}\n"],"names":["$09e991522ca7e64e$var$startX","$09e991522ca7e64e$var$startY","$e3f2d471551ea10d$export$f6f0c3fe4ec306ea","constructor","gridElement","x","y","cell","document","createElement","classList","add","append","linkTile","tile","setXY","linkedTile","unlinkTile","isEmpty","linkTileForMerge","linkedTileForMerge","unlinkTileForMerge","hasTileForMerge","canAccept","newTile","value","mergeTiles","winMessage","querySelector","remove","style","color","mergeValue","setValue","removeFromDOM","$8d16fdf861134c32$export$235cb65c20ad2b7","tileElement","Math","random","setProperty","bgLightness","log2","textContent","waitForTransitionEnd","Promise","resolve","addEventListener","once","waitForAnimationEnd","$09e991522ca7e64e$var$gameBoard","$09e991522ca7e64e$var$grid","cells","i","$d127f00a76274e78$var$GRID_SIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReservedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReservedRow","row","getRandomEmptyCell","emptyCell","filter","randomIndex","length","reduce","groupedCells","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$touchArea","$09e991522ca7e64e$var$restart","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$setupInputOnce","window","$09e991522ca7e64e$var$handleInput","keypress","key","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$moveUp","$09e991522ca7e64e$var$canMoveDown","$09e991522ca7e64e$var$moveDown","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$moveLeft","$09e991522ca7e64e$var$canMoveRigth","$09e991522ca7e64e$var$moveRight","gameResultElement","location","reload","$09e991522ca7e64e$var$slideTiles","promises","forEach","group","$09e991522ca7e64e$var$slideTilesInGroup","targetCell","cellWithTile","j","all","$09e991522ca7e64e$var$canMove","some","index","$09e991522ca7e64e$var$swipe","deltaX","deltaY","abs","hiddenMessage","keysToCancel","includes","preventDefault","movement","touches","clientX","clientY","passive","endX","changedTouches","endY"],"version":3,"file":"index.4b1f7b35.js.map"}